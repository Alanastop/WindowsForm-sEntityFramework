// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Company.cs" company="DataCommunication">
//   DcProgrammingTutorial
// </copyright>
// <summary>
//   The company.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

// ReSharper disable VirtualMemberCallInConstructor
namespace DcProgrammingTutorial.Lib.Model.Persistent
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;

    using DcProgrammingTutorial.Lib.Model.Persistent.Interface;

    /// <summary>
    /// A delegate that holds an event each time a company is added to list.
    /// </summary>
    public delegate void CompanyAddedToList();

    /// <summary>
    /// A delegate which holds an event every time a company is updated.
    /// </summary>
    /// <param name="company">
    /// The company which is updated.
    /// </param>
    public delegate void CompanyUpdated(Company company);

    /// <summary>
    /// A class with the audits of the company.
    /// </summary>
    public class Company : IEntity, IEntityAudit
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Company"/> class.
        /// </summary>
        public Company()
        {
            this.AutoGeneratedId = true;
            this.Documents = new BindingList<Document>();
            this.Created = DateTime.Now;
            this.CreatedBy = Environment.UserName;
        }

        /// <summary>
        /// The company added to list event.
        /// </summary>
        public event CompanyAddedToList CompanyAddedToList;

        /// <summary>
        /// The company updated event.
        /// </summary>
        public event CompanyUpdated CompanyUpdated;

        /// <summary>
        /// Gets or sets a list of documents of the current company.
        /// </summary>
        public virtual IList<Document> Documents { get; set; }

        /// <summary>
        /// Gets or sets the company id.
        /// </summary>
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets the company name.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the code of the company.
        /// </summary>
        public string Code { get; set; }

        /// <summary>
        /// Gets or sets the date and time which the company is created.
        /// </summary>
        public DateTime Created { get; set; }

        /// <summary>
        /// Gets or sets the user the object is created by.
        /// </summary>
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or sets the date and time which the company is updated.
        /// </summary>
        public DateTime? Updated { get; set; }

        /// <summary>
        /// Gets or sets the user the object is updated by.
        /// </summary>
        public string UpdatedBy { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the company is active.
        /// </summary>
        public bool Active { get; set; }

        /// <summary>
        /// Gets or sets when the company is deleted.
        /// </summary>
        [Browsable(false)]
        public DateTime? Deleted { get; set; }

        /// <summary>
        /// Gets or sets the user the object is deleted by.
        /// </summary>
        [Browsable(false)]
        public string DeletedBy { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether id is auto generated.
        /// </summary>
        [Browsable(false)]
        public bool AutoGeneratedId { get; set; }

        /// <summary>
        /// Gets or sets the tax id.
        /// </summary>
        public string TaxId { get; set; }

        /// <summary>
        /// The on document added to list.
        /// </summary>
        public virtual void OnCompanyAddedToList()
        {
            this.CompanyAddedToList?.Invoke();
        }

        /// <summary>
        /// The on company updated.
        /// </summary>
        public virtual void OnCompanyUpdated()
        {
            this.CompanyUpdated?.Invoke(this);
        }
    }
}