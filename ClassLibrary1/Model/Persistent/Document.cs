// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Document.cs" company="Data Communication">
//   DC Tutorial
// </copyright>
// <summary>
//   A delegate that holds an event each time a document is added to list.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

namespace DcProgrammingTutorial.Lib.Model.Persistent
{
    #region

    using System;
    using System.ComponentModel;

    using DcProgrammingTutorial.Lib.Model.Persistent.Interface;

    #endregion

    /// <summary>
    /// A delegate that holds an event each time a document is added to list.
    /// </summary>
    public delegate void DocumentAddedToList();

    /// <summary>
    /// The document updated.
    /// </summary>
    /// <param name="document">
    /// The document.
    /// </param>
    public delegate void DocumentUpdated(Document document);

    /// <summary>
    /// A class with the document's audits.
    /// </summary>
    public class Document : IEntity, IEntityAudit
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Document"/> class.
        /// </summary>
        public Document()
        {
            this.AutoGeneratedId = true;
            this.Created = DateTime.Now;
            this.CreatedBy = Environment.UserName;
        }

        /// <summary>
        /// A list that contains our current documents.
        /// </summary>
        public event DocumentAddedToList DocumentAddedToList;

        /// <summary>
        /// An event which is invoked each time a document is updated.
        /// </summary>
        public event DocumentUpdated DocumentUpdated;

        /// <summary>
        /// Gets or sets a value indicating whether id is auto generated..
        /// </summary>
        [Browsable(false)]
        public bool AutoGeneratedId { get; set; }

        /// <summary>
        /// The company name.
        /// </summary>
        public string CompanyName => this.Company?.Name ?? string.Empty;

        /// <summary>
        /// Gets or sets the document id.
        /// </summary>
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets the document name.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the document code.
        /// </summary>
        public string Code { get; set; }

        /// <summary>
        /// Gets or sets the balance of the document.
        /// </summary>
        public double Balance { get; set; }

        /// <summary>
        /// Gets or sets the document company.
        /// </summary>
        public Company Company { get; set; }

        /// <summary>
        /// Gets or sets the company id.
        /// </summary>
        [Browsable(false)]
        public int? CompanyId { get; set; }

        /// <summary>
        /// Gets or sets the date and time which the document is created.
        /// </summary>
        public DateTime Created { get; set; }

        /// <summary>
        /// Gets or sets the date and time which the document is created by.
        /// </summary>
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or sets the date and time which the document is deleted.
        /// </summary>
        public DateTime? Deleted { get; set; }

        /// <summary>
        /// Gets or sets the user the document is deleted by.
        /// </summary>
        public string DeletedBy { get; set; }

        /// <summary>
        /// Gets or sets the date and time which the document is updated.
        /// </summary>
        public DateTime? Updated { get; set; }

        /// <summary>
        /// Gets or sets the user the document is updated by.
        /// </summary>
        public string UpdatedBy { get; set; }

        /// <summary>
        /// The on document added to list.
        /// </summary>
        public virtual void OnDocumentAddedToList()
        {
            this.DocumentAddedToList?.Invoke();
        }

        /// <summary>
        /// Invokes an event every time the method is updated.
        /// </summary>
        public virtual void OnDocumentUpdated()
        {
            this.DocumentUpdated?.Invoke(this);
        }
    }
}